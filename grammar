Gen  ::= [Cmd]+
	Cmd ::= Cond_Act | Asgn
		Cond_Act ::= ["While", "If"] '(' Expr ')' { Cmd | {Cmd}* }
		Asgn ::= Id '=' Expr
			Expr ::= Mul{[+, -]Mul}*
			Mul  ::= Par{[*, \]Par}*
			Par  ::= '('Expr')' | Num | Id | Id'('Expr')'
			Num  ::= ['0' - '9']+
			Id ::= ['a' - 'z', 'A' - 'Z', '_', '$']['a' - 'z', 'A' - 'Z', '_', '$', '0' - '9']+


Omega+:

	while(x - 4)
	{
		x = sin(x) + 31;
		y = y - cos(8);
	}

	y = x;

															;
					while																	...
x - 4											;
								->									;
				sin(x) + 31				x					->						NULL
												y - cos(8)			y

	------------------------------------------------------

	if(x - 4) y = 5;

	------------------------------------------------------

	if(4) while(x - 1) x = x + 5;

Omega-:
	while(x - 4)
	{
		4 = sin(x) + 31;	<--------- Const = ...
		y = y - cos(8);
	}

	------------------------------------------------------

	if(x - 4) y = 5			<--------- No ';'

	------------------------------------------------------

	if(4) x + 5;			<--------- Just Expr
